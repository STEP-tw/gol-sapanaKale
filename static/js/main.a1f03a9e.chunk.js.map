{"version":3,"sources":["_src/util.js","_src/gameOfLife.js","_src/lib.js","Cell.js","App.js","serviceWorker.js","index.js"],"names":["concat","list1","list2","isIncludes","source","element","includes","repeat","string","times","Array","fill","join","module","exports","splitNumbers","stringOfnumbers","split","map","x","increamentList","begin","end","size","i","cartesionProduct","set1","set2","result","_iteratorNormalCompletion","_didIteratorError","_iteratorError","undefined","_step","_iterator","Symbol","iterator","next","done","valueOfSet1","value","_iteratorNormalCompletion2","_didIteratorError2","_iteratorError2","_step2","_iterator2","valueOfSet2","push","err","return","joinWithComa","item1","item2","createUniqueList","convertToMatrix","width","list","length","slice","convertToLinear","matrix","reduce","intersection","isContain","bind","filter","joinByPipe","justifier","text","spaces","require","isAlive","createBoard","updateWorld","createWorldGrid","isBoundsInvalid","nextGeneration","currGeneration","bounds","world","isCellAlive","nthGeneration","iteration","generateNthGeneration","parameters","N","aliveCells","bound","topLeft","xPrime","bottomRight","y","yPrime","addRows","rowNumber","joinIndexes","row","declareAlive","liveCells","column","declareDead","allPossibleNeighbours","cell","neighbours","index","toString","indexOf","splice","extractNeighbours","validCells","neighbourCells","isValid","extractBounds","extractGeneration","calculateWidth","lastRow","createGrid","border","grid","item","createBorder","rowWidth","columnWidth","repeatDash","validLiveCells","liveCellsString","aliveNeighbours","willRemainAlive","willComeAlive","extractParameters","details","justify","board","isXInvalid","isYInvalid","Cell","react_default","a","createElement","height","this","props","color","col","stroke","strokeWidth","Component","App","_this","Object","classCallCheck","possibleConstructorReturn","getPrototypeOf","call","state","gen","_this2","timerID","setInterval","tick","setState","cells","colors","j","src_Cell","genCells","forEach","toColourLookup","className","Boolean","window","location","hostname","match","ReactDOM","render","src_App","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.a1f03a9e.chunk.js","sourcesContent":["const cartesionProduct = function(set1, set2) {\n  let result = [];\n  for ( let valueOfSet1 of set1 ) {\n    for ( let valueOfSet2 of set2 ) {\n      result.push([ valueOfSet1, valueOfSet2 ]);\n    }\n  }\n  return result;\n}\n\nconst joinWithComa = function(item1, item2) {\n  return item1 + \",\" + item2;\n}\n\nconst createUniqueList = function(size, element) {\n  return new Array( size ).fill( element );\n}\n\nconst concat = function(list1, list2) {\n  return list1.concat( list2 );\n}\n\nconst convertToLinear = function(matrix) {\n  return matrix.reduce(concat, []);\n}\n\nconst convertToMatrix = function(width, list) {\n  if(list.length == 0) {\n    return [];\n  }\n  return [ list.slice(0, width) ].concat( convertToMatrix(width, list.slice( width )) );\n}\n\nconst isIncludes = function (source, element) {\n  return source.includes( element );\n}\n\nconst increamentList = function(begin, end) {\n  let size = end - begin + 1;\n  if(size < 0) {\n    return [];\n  }\n  return new Array( size ).fill( begin ).map( (x,i) => x+i );\n}\n\nconst intersection = function (set1, set2) {\n  let isContain = isIncludes.bind(null, set2);\n  return set1.filter( isContain );\n}\n\nconst splitNumbers = function(stringOfnumbers) {\n  let list = [];\n  list = stringOfnumbers.split(',');\n  return list.map( x => +x );\n}\n\nconst joinByPipe = function(list) {\n  let joinedList = '|' + list.join('|') + '|';\n  return joinedList;\n}\n\nconst repeat = function(string, times) {\n  return new Array(times).fill(string).join(\"\");\n}\n\nconst justifier = function(width, text) {\n  let spaces = width - text.length - 1;\n  return \" \" + text + repeat(' ',spaces);\n}\n\nmodule.exports = { splitNumbers,\n                   isIncludes, \n                   increamentList, \n                   cartesionProduct,  \n                   joinWithComa, \n                   createUniqueList, \n                   concat, \n                   convertToMatrix, \n                   convertToLinear,\n                   intersection,\n                   joinByPipe,\n                   repeat,\n                   justifier };\n","const { convertToLinear, splitNumbers } = require('./util.js'); \nconst { isAlive, createBoard, updateWorld, createWorldGrid, isBoundsInvalid } = require('./lib.js'); \n\nconst nextGeneration = function( currGeneration, bounds ) {\n  let world = convertToLinear( createBoard( bounds ) );\n  let isCellAlive = isAlive.bind( null, currGeneration, bounds );\n  return world.filter( isCellAlive ).map( splitNumbers );\n}\n\nconst nthGeneration = function(bounds, currGeneration, iteration) {\n  if(iteration == 0) {\n    return currGeneration;\n  }\n  return nthGeneration(bounds, nextGeneration(currGeneration, bounds), --iteration);\n}\n\nconst generateNthGeneration = function(parameters) {\n  let { bounds, currGeneration, N } = parameters;\n  if(isBoundsInvalid( bounds )) {\n    return \"Invalid bounds.\";\n  }\n  let aliveCells = nthGeneration(bounds, currGeneration, N);\n  let world = createBoard( bounds );\n  return createWorldGrid( updateWorld(world, aliveCells) );\n}\n\nmodule.exports = { nextGeneration,\n                   nthGeneration,\n                   generateNthGeneration };\n","const { repeat,\n        splitNumbers,\n        intersection,\n        increamentList,\n        joinWithComa,\n        convertToLinear,\n        convertToMatrix,\n        createUniqueList,\n        justifier,\n        joinByPipe,\n        concat,\n        cartesionProduct,\n        isIncludes } = require(\"./util.js\");\n\nconst isBoundsInvalid = function( bounds ) {\n  let isXInvalid = bounds.topLeft[0] > bounds.bottomRight[0];\n  let isYInvalid = bounds.topLeft[1] > bounds.bottomRight[1];\n  return isXInvalid || isYInvalid;\n}\n\nconst createBoard = function( bound ) {\n  let x = bound.topLeft[0], xPrime = bound.bottomRight[0];\n  let y = bound.topLeft[1], yPrime = bound.bottomRight[1];\n  let rows = increamentList(x, xPrime);\n  return rows.reduce( addRows.bind(null, y, yPrime), [] );\n}\n\nconst addRows = function(y, yPrime, matrix, rowNumber) {\n  let joinIndexes = joinWithComa.bind(null, rowNumber);\n  let row = increamentList(y, yPrime).map( joinIndexes );\n  matrix.push( row );\n  return matrix;\n}\n\nconst updateWorld = function (world, liveCells) {\n  let width = world[0].length;\n  let validLiveCells = liveCells.map(x => x.toString());\n  validLiveCells = intersection( convertToLinear( world ), validLiveCells);\n  world = validLiveCells.reduce( declareAlive, world );\n  world = convertToLinear( world ).map( declareDead );\n  return convertToMatrix( width, world );\n}\n\nconst declareAlive = function (world, liveCells) {\n  let row = liveCells.split(',')[0];\n  let column = liveCells.split(',')[1];\n  world[ row ][ column ] = '@';\n  return world;\n}\n\nconst declareDead  = function (element) {\n  return (element == '@') ? element : ' ';\n}\n\nconst allPossibleNeighbours = function (cell) {\n  let x = +cell.split(',')[ 0 ];\n  let y = +cell.split(',')[ 1 ];\n  let neighbours = cartesionProduct( [x-1, x, x+1] , [y-1, y, y+1] );\n  neighbours = neighbours.map( x => x.toString() );\n  let index = neighbours.indexOf( cell );\n  neighbours.splice( index, 1 );\n  return neighbours;\n}\n\nconst extractNeighbours = function(bound, cell) {\n  let validCells = convertToLinear( createBoard( bound ) );\n  let neighbourCells = allPossibleNeighbours( cell );\n  let isValid = isIncludes.bind( null, validCells );\n  return neighbourCells.filter( isValid );\n}\n\nconst isAlive = function ( liveCells, bound, cell ) {\n  let neighbours = extractNeighbours( bound, cell );\n  let liveCellsString = liveCells.map( x => x.toString() );\n  let aliveNeighbours = intersection( neighbours, liveCellsString );\n  let willRemainAlive = aliveNeighbours.length == 2 && liveCellsString.includes(cell);\n  let willComeAlive = aliveNeighbours.length == 3;\n  return willRemainAlive || willComeAlive;\n}\n\nconst extractParameters = function(details) {\n  let bounds = extractBounds(details[2], details[3]);\n  let currGeneration = extractGeneration( details[4] );\n  let N = +details[5].split('=')[1];\n  return { bounds : bounds, currGeneration : currGeneration, N : N };\n}\n\nconst extractBounds = function(topLeft, bottomRight) {\n  topLeft = splitNumbers( topLeft.split('=')[1] );\n  bottomRight = splitNumbers( bottomRight.split('=')[1] );\n  return { topLeft : topLeft, bottomRight : bottomRight };\n}\n\nconst extractGeneration = function(aliveCells) {\n  aliveCells = aliveCells.split('=')[1].split(' ');\n  return aliveCells.map( splitNumbers );\n}\n\nconst calculateWidth = function(world) {\n  let lastRow = world[ world.length - 1 ];\n  let row = lastRow.length;\n  let column = lastRow[ row - 1 ].length + 2;\n  return {row : +row, column : +column};\n}\n\nconst createGrid = function(list, border) {\n  let grid = [];\n  for(let item of list) {\n    grid.push(border);\n    grid.push(item);\n  }\n  grid.push(border);\n  return grid.join('\\n');\n}\n\nconst createBorder = function(rowWidth, columnWidth) {\n  let border = new Array(rowWidth).fill(columnWidth);\n  const repeatDash = repeat.bind(null, '-');\n  border = border.map(repeatDash).join('+');\n  border = '+' + border + '+';\n  return border;\n}\n\nconst createWorldGrid = function (world) {\n  let width = calculateWidth(world);\n  let border = createBorder(width.row, width.column);\n  let justify = justifier.bind(null, width.column);\n  let board = world.map( list => joinByPipe( list.map(justify) ) );\n return createGrid(board, border);\n}\n\nmodule.exports = {createBoard, \n                  addRows,\n                  declareAlive, \n                  declareDead, \n                  updateWorld, \n                  allPossibleNeighbours,\n                  extractNeighbours,\n                  isAlive,\n                  extractParameters,\n                  extractGeneration,\n                  extractBounds,\n                  calculateWidth,\n                  createGrid,\n                  createWorldGrid,\n                  isBoundsInvalid, \n                  createBorder };\n","import React, { Component } from 'react';\n\nclass Cell extends Component {\n  render() {\n    return <rect width=\"10\" \n    height=\"10\"\n    fill={this.props.color || \"white\"}\n    x={this.props.col*10} \n    y={this.props.row*10} \n    stroke=\"lightgray\" \n    strokeWidth={1}></rect>\n  }\n}\n\nexport default Cell;","import React, { Component } from 'react';\nimport Cell from './Cell';\nconst {nextGeneration} = require('./_src/gameOfLife.js');\n\nconst genId = (a) => a.join(\"_\");\n\nconst genCells = (colors) => {\n  let cells = [];\n  for(let i=0;i<17;i++) {\n    for(let j=0;j<17;j++) {\n      cells.push(<Cell row={i} col={j} color={colors[`${i}_${j}`]}/>);\n    }\n  }\n  return cells;\n}\n\nconst toColourLookup=(cells) => {\n  let colors={};\n  cells.forEach(cell => {\n    colors[genId(cell)]=\"black\"\n  });\n  return colors;\n}\n\nclass App extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {gen: this.props.gen};\n  }\n  componentDidMount() {\n    this.timerID = setInterval(()=>this.tick(),180)\n  }\n  tick() {\n    this.setState((state,props)=>{\n      let newState=nextGeneration(state.gen,{topLeft:[0,0],bottomRight:[17,17]});\n      return {gen:newState};\n    });\n  }\n  render() {\n    let colors=toColourLookup(this.state.gen)\n    let cells=genCells(colors);\n    return (\n      <div className=\"App\">\n        <svg width={800} height={800}>\n          {cells}\n        </svg>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nconst coords=[ [ 1, 5 ],\n[ 1, 11 ],\n[ 2, 5 ],\n[ 2, 11 ],\n[ 3, 5 ],\n[ 3, 6 ],\n[ 3, 10 ],\n[ 3, 11 ],\n[ 5, 1 ],\n[ 5, 2 ],\n[ 5, 3 ],\n[ 5, 6 ],\n[ 5, 7 ],\n[ 5, 9 ],\n[ 5, 10 ],\n[ 5, 13 ],\n[ 5, 14 ],\n[ 5, 15 ],\n[ 6, 3 ],\n[ 6, 5 ],\n[ 6, 7 ],\n[ 6, 9 ],\n[ 6, 11 ],\n[ 6, 13 ],\n[ 7, 5 ],\n[ 7, 6 ],\n[ 7, 10 ],\n[ 7, 11 ],\n[ 9, 5 ],\n[ 9, 6 ],\n[ 9, 10 ],\n[ 9, 11 ],\n[ 10, 3 ],\n[ 10, 5 ],\n[ 10, 7 ],\n[ 10, 9 ],\n[ 10, 11 ],\n[ 10, 13 ],\n[ 11, 1 ],\n[ 11, 2 ],\n[ 11, 3 ],\n[ 11, 6 ],\n[ 11, 7 ],\n[ 11, 9 ],\n[ 11, 10 ],\n[ 11, 13 ],\n[ 11, 14 ],\n[ 11, 15 ],\n[ 13, 5 ],\n[ 13, 6 ],\n[ 13, 10 ],\n[ 13, 11 ],\n[ 14, 5 ],\n[ 14, 11 ],\n[ 15, 5 ],\n[ 15, 11 ] ];\nReactDOM.render(<App gen={coords}/>, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}